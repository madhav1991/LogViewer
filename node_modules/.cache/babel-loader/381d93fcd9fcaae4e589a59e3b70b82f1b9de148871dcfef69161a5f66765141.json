{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/TimelineChartSVG.js\";\nimport React from \"react\";\nimport { groupLogsByDateAndHour } from \"./utils/index\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TimelineChartSVG = _ref => {\n  let {\n    data\n  } = _ref;\n  const groupedData = groupLogsByDateAndHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count), 0); // Handle case where groupedData might be empty\n\n  const baseWidth = 600;\n  const minBarWidth = 65;\n  const chartHeight = 200;\n  const chartWidth = Math.max(baseWidth, Math.min(groupedData.length * minBarWidth, baseWidth * 2));\n  const barWidth = Math.max(minBarWidth, chartWidth / groupedData.length);\n  const yAxisTicks = 5; // Number of ticks on the Y-axis\n  const tickSpacing = chartHeight / yAxisTicks; // Spacing between Y-axis ticks\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: chartWidth + 50,\n    height: chartHeight + 50,\n    role: \"img\",\n    \"aria-labelledby\": \"chartTitle chartDesc\",\n    tabIndex: \"0\",\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      id: \"chartTitle\",\n      children: \"Logs Timeline Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"desc\", {\n      id: \"chartDesc\",\n      children: \"A bar chart representing logs grouped by date and hour. Each bar shows the count of logs for a specific hour.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), groupedData.length === 0 ? /*#__PURE__*/_jsxDEV(\"text\", {\n      x: chartWidth / 2 + 50 // Center the text horizontally\n      ,\n      y: chartHeight / 2 + 25 // Center the text vertically\n      ,\n      textAnchor: \"middle\",\n      fontSize: \"16px\",\n      fill: \"#777\",\n      children: \"No data to show\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [groupedData.map((d, i) => {\n        const barHeight = d.count / maxCount * chartHeight;\n        return /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: i * barWidth + 50 // Adjust x to account for Y-axis\n          ,\n          y: chartHeight - barHeight,\n          width: barWidth - 2 // Add spacing between bars\n          ,\n          height: barHeight,\n          fill: \"#4A90E2\",\n          \"aria-label\": `${d.date} ${d.hour}:00 - ${d.count} logs`\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this);\n      }), groupedData.map((d, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n        x: i * barWidth + barWidth / 2 + 50 // Adjust x to account for Y-axis\n        ,\n        y: chartHeight + 20 // Position of x-axis labels\n        ,\n        textAnchor: \"middle\",\n        fontSize: \"10px\",\n        fill: \"#333\",\n        children: [`${d.date} ${d.hour}:00`, \" \"]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)), [...Array(yAxisTicks + 1)].map((_, i) => {\n        const value = Math.round(maxCount / yAxisTicks * i); // Calculate tick value\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"45\",\n            y1: chartHeight - i * tickSpacing,\n            x2: \"50\",\n            y2: chartHeight - i * tickSpacing,\n            stroke: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: \"40\",\n            y: chartHeight - i * tickSpacing + 4,\n            textAnchor: \"end\",\n            fontSize: \"12px\",\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"20\",\n        y: chartHeight / 2,\n        textAnchor: \"middle\",\n        fontSize: \"12px\",\n        transform: `rotate(-90, 20, ${chartHeight / 2})` // Rotate for vertical label\n        ,\n        children: \"Logs Count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChartSVG;\nvar _c;\n$RefreshReg$(_c, \"TimelineChartSVG\");","map":{"version":3,"names":["React","groupLogsByDateAndHour","jsxDEV","_jsxDEV","Fragment","_Fragment","TimelineChartSVG","_ref","data","groupedData","maxCount","Math","max","map","d","count","baseWidth","minBarWidth","chartHeight","chartWidth","min","length","barWidth","yAxisTicks","tickSpacing","width","height","role","tabIndex","children","id","fileName","_jsxFileName","lineNumber","columnNumber","x","y","textAnchor","fontSize","fill","i","barHeight","date","hour","Array","_","value","round","x1","y1","x2","y2","stroke","transform","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/TimelineChartSVG.js"],"sourcesContent":["import React from \"react\";\nimport { groupLogsByDateAndHour } from \"./utils/index\";\n\nexport const TimelineChartSVG = ({ data }) => {\n  const groupedData = groupLogsByDateAndHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count), 0); // Handle case where groupedData might be empty\n\n  const baseWidth = 600; \n  const minBarWidth = 65; \n  const chartHeight = 200;\n\n  const chartWidth = Math.max(baseWidth, Math.min(groupedData.length * minBarWidth, baseWidth * 2));\n\n  const barWidth = Math.max(minBarWidth, chartWidth / groupedData.length); \n  const yAxisTicks = 5; // Number of ticks on the Y-axis\n  const tickSpacing = chartHeight / yAxisTicks; // Spacing between Y-axis ticks\n\n  return (\n    <svg \n      width={chartWidth + 50} \n      height={chartHeight + 50} \n      role=\"img\" \n      aria-labelledby=\"chartTitle chartDesc\" \n      tabIndex=\"0\"\n    >\n      <title id=\"chartTitle\">Logs Timeline Chart</title>\n      <desc id=\"chartDesc\">A bar chart representing logs grouped by date and hour. Each bar shows the count of logs for a specific hour.</desc>\n\n      {groupedData.length === 0 ? (\n        <text\n          x={chartWidth / 2 + 50} // Center the text horizontally\n          y={chartHeight / 2 + 25} // Center the text vertically\n          textAnchor=\"middle\"\n          fontSize=\"16px\"\n          fill=\"#777\"\n        >\n          No data to show\n        </text>\n      ) : (\n        <>\n          {/* Bars */}\n          {groupedData.map((d, i) => {\n            const barHeight = (d.count / maxCount) * chartHeight;\n            return (\n              <rect\n                key={i}\n                x={i * barWidth + 50} // Adjust x to account for Y-axis\n                y={chartHeight - barHeight}\n                width={barWidth - 2} // Add spacing between bars\n                height={barHeight}\n                fill=\"#4A90E2\"\n                aria-label={`${d.date} ${d.hour}:00 - ${d.count} logs`}\n              />\n            );\n          })}\n\n          {/* X-axis labels */}\n          {groupedData.map((d, i) => (\n            <text\n              key={i}\n              x={i * barWidth + barWidth / 2 + 50} // Adjust x to account for Y-axis\n              y={chartHeight + 20} // Position of x-axis labels\n              textAnchor=\"middle\"\n              fontSize=\"10px\"\n              fill=\"#333\"\n            >\n              {`${d.date} ${d.hour}:00`} {/* Display date and hour */}\n            </text>\n          ))}\n\n          {/* Y-axis ticks and labels */}\n          {[...Array(yAxisTicks + 1)].map((_, i) => {\n            const value = Math.round((maxCount / yAxisTicks) * i); // Calculate tick value\n            return (\n              <g key={i}>\n                {/* Y-axis ticks */}\n                <line\n                  x1=\"45\"\n                  y1={chartHeight - i * tickSpacing}\n                  x2=\"50\"\n                  y2={chartHeight - i * tickSpacing}\n                  stroke=\"black\"\n                />\n                {/* Y-axis labels */}\n                <text\n                  x=\"40\"\n                  y={chartHeight - i * tickSpacing + 4}\n                  textAnchor=\"end\"\n                  fontSize=\"12px\"\n                >\n                  {value}\n                </text>\n              </g>\n            );\n          })}\n\n          <text\n            x=\"20\"\n            y={chartHeight / 2}\n            textAnchor=\"middle\"\n            fontSize=\"12px\"\n            transform={`rotate(-90, 20, ${chartHeight / 2})`} // Rotate for vertical label\n          >\n            Logs Count\n          </text>\n        </>\n      )}\n    </svg>\n  );\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}