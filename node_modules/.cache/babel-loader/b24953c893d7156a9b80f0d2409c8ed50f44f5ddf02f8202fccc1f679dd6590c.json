{"ast":null,"code":"// Function to format time to the desired hourly format (e.g., \"2024-08-21T09:00:00\")\nconst formatHour = timestamp => {\n  const date = new Date(timestamp);\n  date.setMinutes(0, 0, 0); // Set minutes and seconds to 0 to group by hour\n  return date.toISOString();\n};\n\n// Group logs by hourly timestamp and count the occurrences\nexport const groupLogsByHour = logs => {\n  const groupedLogs = {};\n  logs.forEach(log => {\n    const hour = formatHour(log._time); // Format the time to hour\n    if (groupedLogs[hour]) {\n      groupedLogs[hour] += 1; // Increment count if the hour already exists\n    } else {\n      groupedLogs[hour] = 1; // Initialize count for a new hour\n    }\n  });\n  // Convert the grouped logs object to the desired array format\n  return Object.keys(groupedLogs).map(hour => ({\n    time: hour,\n    count: groupedLogs[hour]\n  }));\n};","map":{"version":3,"names":["formatHour","timestamp","date","Date","setMinutes","toISOString","groupLogsByHour","logs","groupedLogs","forEach","log","hour","_time","Object","keys","map","time","count"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/utils/index.js"],"sourcesContent":["// Function to format time to the desired hourly format (e.g., \"2024-08-21T09:00:00\")\nconst formatHour = (timestamp) => {\n    const date = new Date(timestamp);\n    date.setMinutes(0, 0, 0); // Set minutes and seconds to 0 to group by hour\n    return date.toISOString();\n  };\n  \n  // Group logs by hourly timestamp and count the occurrences\n  export const groupLogsByHour = (logs) => {\n    const groupedLogs = {};\n    logs.forEach((log) => {\n      const hour = formatHour(log._time); // Format the time to hour\n      if (groupedLogs[hour]) {\n        groupedLogs[hour] += 1; // Increment count if the hour already exists\n      } else {\n        groupedLogs[hour] = 1; // Initialize count for a new hour\n      }\n    });\n    // Convert the grouped logs object to the desired array format\n    return Object.keys(groupedLogs).map((hour) => ({\n      time: hour,\n      count: groupedLogs[hour],\n    }));\n  };\n  "],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAIC,SAAS,IAAK;EAC9B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;EAChCC,IAAI,CAACE,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAC1B,OAAOF,IAAI,CAACG,WAAW,CAAC,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EACvC,MAAMC,WAAW,GAAG,CAAC,CAAC;EACtBD,IAAI,CAACE,OAAO,CAAEC,GAAG,IAAK;IACpB,MAAMC,IAAI,GAAGX,UAAU,CAACU,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;IACpC,IAAIJ,WAAW,CAACG,IAAI,CAAC,EAAE;MACrBH,WAAW,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM;MACLH,WAAW,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,CAAC;EACF;EACA,OAAOE,MAAM,CAACC,IAAI,CAACN,WAAW,CAAC,CAACO,GAAG,CAAEJ,IAAI,KAAM;IAC7CK,IAAI,EAAEL,IAAI;IACVM,KAAK,EAAET,WAAW,CAACG,IAAI;EACzB,CAAC,CAAC,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}