{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js\";\n// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;\n\nimport React from \"react\";\n\n// Group logs by hour\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupLogsByHour = data => {\n  const grouped = {};\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours(); // Corrected property to `_time`\n    grouped[hour] = (grouped[hour] || 0) + 1;\n  });\n  return Object.keys(grouped).map(hour => ({\n    time: hour,\n    count: grouped[hour]\n  }));\n};\nexport const TimelineChartSVG = _ref => {\n  let {\n    data\n  } = _ref;\n  const groupedData = groupLogsByHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count));\n  console.log('groupedData', groupedData);\n  const chartWidth = 600;\n  const chartHeight = 200;\n  const barWidth = chartWidth / groupedData.length;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: chartWidth,\n    height: chartHeight + 40,\n    children: [groupedData.map((d, i) => {\n      const barHeight = d.count / maxCount * chartHeight;\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: i * barWidth,\n        y: chartHeight - barHeight,\n        width: barWidth - 2 // Add spacing between bars\n        ,\n        height: barHeight,\n        fill: \"#4A90E2\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this);\n    }), groupedData.map((d, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: i * barWidth + barWidth / 2,\n      y: chartHeight + 20 // Adjust position of x-axis labels\n      ,\n      textAnchor: \"middle\",\n      fontSize: \"12px\",\n      children: [`${d.time}:00`, \" \"]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"-10\" // Adjust the position for y-axis\n      ,\n      y: \"10\",\n      textAnchor: \"end\",\n      fontSize: \"12px\",\n      children: \"Logs Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChartSVG;\nexport default TimelineChartSVG;\nvar _c;\n$RefreshReg$(_c, \"TimelineChartSVG\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","groupLogsByHour","data","grouped","forEach","log","hour","Date","_time","getHours","Object","keys","map","time","count","TimelineChartSVG","_ref","groupedData","maxCount","Math","max","d","console","chartWidth","chartHeight","barWidth","length","width","height","children","i","barHeight","x","y","fill","fileName","_jsxFileName","lineNumber","columnNumber","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;\n\nimport React from \"react\";\n\n// Group logs by hour\nconst groupLogsByHour = (data) => {\n  const grouped = {};\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours(); // Corrected property to `_time`\n    grouped[hour] = (grouped[hour] || 0) + 1;\n  });\n  return Object.keys(grouped).map(hour => ({\n    time: hour,\n    count: grouped[hour]\n  }));\n};\n\nexport const TimelineChartSVG = ({ data }) => {\n  const groupedData = groupLogsByHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count));\n  console.log('groupedData',groupedData)\n  const chartWidth = 600;\n  const chartHeight = 200;\n  const barWidth = chartWidth / groupedData.length;\n\n  return (\n    <svg width={chartWidth} height={chartHeight + 40}>\n      {groupedData.map((d, i) => {\n        const barHeight = (d.count / maxCount) * chartHeight;\n        return (\n          <rect\n            key={i}\n            x={i * barWidth}\n            y={chartHeight - barHeight}\n            width={barWidth - 2} // Add spacing between bars\n            height={barHeight}\n            fill=\"#4A90E2\"\n          />\n        );\n      })}\n\n      {/* X-axis labels */}\n      {groupedData.map((d, i) => (\n        <text\n          key={i}\n          x={i * barWidth + barWidth / 2}\n          y={chartHeight + 20} // Adjust position of x-axis labels\n          textAnchor=\"middle\"\n          fontSize=\"12px\"\n        >\n          {`${d.time}:00`} {/* Display hour label */}\n        </text>\n      ))}\n\n      {/* Y-axis labels */}\n      <text\n        x=\"-10\" // Adjust the position for y-axis\n        y=\"10\"\n        textAnchor=\"end\"\n        fontSize=\"12px\"\n      >\n        Logs Count\n      </text>\n    </svg>\n  );\n};\n\nexport default TimelineChartSVG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}