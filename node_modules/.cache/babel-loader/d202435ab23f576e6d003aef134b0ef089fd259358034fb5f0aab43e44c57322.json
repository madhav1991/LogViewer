{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js\";\n// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;\n\nimport React from \"react\";\nimport { groupLogsByHour } from \"./utils/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TimelineChartSVG = _ref => {\n  let {\n    data\n  } = _ref;\n  const groupedData = groupLogsByHour(data).map(d => ({\n    time: new Date(d.time).getTime(),\n    count: d.count\n  }));\n  const times = groupedData.map(d => d.time);\n  const counts = groupedData.map(d => d.count);\n  const minTime = Math.min(...times);\n  const maxTime = Math.max(...times);\n  const maxCount = Math.max(...counts);\n  const width = 600; // Total width of the chart\n  const height = 200; // Total height of the chart\n  const padding = 40; // Padding for labels and axes\n  const barWidth = (width - padding * 2) / times.length - 10; // Auto-adjust bar width\n\n  const xScale = time => padding + (time - minTime) * (width - padding * 2) / (maxTime - minTime);\n  const yScale = count => height - padding - count * (height - padding * 2) / maxCount;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: \"100%\",\n    height: height,\n    viewBox: `0 0 ${width} ${height}`,\n    children: [/*#__PURE__*/_jsxDEV(\"line\", {\n      x1: padding,\n      y1: height - padding,\n      x2: width - padding,\n      y2: height - padding,\n      stroke: \"#ccc\",\n      strokeWidth: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n      x1: padding,\n      y1: padding,\n      x2: padding,\n      y2: height - padding,\n      stroke: \"#ccc\",\n      strokeWidth: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), groupedData.map((_ref2, index) => {\n      let {\n        time,\n        count\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: xScale(time) - 10,\n        y: yScale(count),\n        width: 20,\n        height: height - padding - yScale(count),\n        fill: \"#4A90E2\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this);\n    }), groupedData.map((_ref3, index) => {\n      let {\n        time\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(\"text\", {\n        x: xScale(time),\n        y: height - padding + 20,\n        textAnchor: \"middle\",\n        fontSize: \"10px\",\n        children: new Date(time).toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this);\n    }), [...Array(5).keys()].map(i => {\n      const yValue = Math.round(i * maxCount / 4);\n      return /*#__PURE__*/_jsxDEV(\"text\", {\n        x: padding - 10,\n        y: yScale(yValue) + 5,\n        textAnchor: \"end\",\n        fontSize: \"10px\",\n        children: yValue\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this);\n    }), [...Array(5).keys()].map(i => {\n      const yValue = Math.round(i * maxCount / 4);\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: padding,\n        y1: yScale(yValue),\n        x2: width - padding,\n        y2: yScale(yValue),\n        stroke: \"#eee\",\n        strokeWidth: 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChartSVG;\nexport default TimelineChartSVG;\nvar _c;\n$RefreshReg$(_c, \"TimelineChartSVG\");","map":{"version":3,"names":["React","groupLogsByHour","jsxDEV","_jsxDEV","TimelineChartSVG","_ref","data","groupedData","map","d","time","Date","getTime","count","times","counts","minTime","Math","min","maxTime","max","maxCount","width","height","padding","barWidth","length","xScale","yScale","viewBox","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","_ref2","index","x","y","fill","_ref3","textAnchor","fontSize","toLocaleTimeString","hour","minute","Array","keys","i","yValue","round","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;\n\n\nimport React from \"react\";\nimport { groupLogsByHour } from \"./utils/index\";\n\nexport const TimelineChartSVG = ({ data }) => {\n  const groupedData = groupLogsByHour(data).map(d => ({\n    time: new Date(d.time).getTime(),\n    count: d.count,\n  }));\n\n  const times = groupedData.map(d => d.time);\n  const counts = groupedData.map(d => d.count);\n\n  const minTime = Math.min(...times);\n  const maxTime = Math.max(...times);\n  const maxCount = Math.max(...counts);\n\n  const width = 600; // Total width of the chart\n  const height = 200; // Total height of the chart\n  const padding = 40; // Padding for labels and axes\n  const barWidth = (width - padding * 2) / times.length - 10; // Auto-adjust bar width\n\n\n  const xScale = (time) => padding + ((time - minTime) * (width - padding * 2)) / (maxTime - minTime);\n  const yScale = (count) => height - padding - (count * (height - padding * 2)) / maxCount;\n\n  return (\n    <svg width=\"100%\" height={height} viewBox={`0 0 ${width} ${height}`}>\n      {/* X Axis */}\n      <line x1={padding} y1={height - padding} x2={width - padding} y2={height - padding} stroke=\"#ccc\" strokeWidth={1} />\n\n      {/* Y Axis */}\n      <line x1={padding} y1={padding} x2={padding} y2={height - padding} stroke=\"#ccc\" strokeWidth={1} />\n\n      {/* Bars */}\n      {groupedData.map(({ time, count }, index) => (\n        <rect\n          key={index}\n          x={xScale(time) - 10}\n          y={yScale(count)}\n          width={20}\n          height={height - padding - yScale(count)}\n          fill=\"#4A90E2\"\n        />\n      ))}\n\n      {/* X Axis Labels */}\n      {groupedData.map(({ time }, index) => (\n        <text\n          key={index}\n          x={xScale(time)}\n          y={height - padding + 20}\n          textAnchor=\"middle\" \n          fontSize=\"10px\"\n        >\n            {new Date(time).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n        </text>\n      ))}\n\n      {/* Y Axis Labels */}\n      {[...Array(5).keys()].map(i => {\n        const yValue = Math.round((i * maxCount) / 4);\n        return (\n          <text\n            key={i}\n            x={padding - 10}\n            y={yScale(yValue) + 5}\n            textAnchor=\"end\"\n            fontSize=\"10px\"\n          >\n            {yValue}\n          </text>\n        );\n      })}\n\n      {/* Y Axis Horizontal Lines */}\n      {[...Array(5).keys()].map(i => {\n        const yValue = Math.round((i * maxCount) / 4);\n        return (\n          <line\n            key={i}\n            x1={padding}\n            y1={yScale(yValue)}\n            x2={width - padding}\n            y2={yScale(yValue)}\n            stroke=\"#eee\"\n            strokeWidth={1}\n          />\n        );\n      })}\n    </svg>\n  );\n};\n\nexport default TimelineChartSVG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}