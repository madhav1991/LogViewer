{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/LogViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { LogViewerContainer, StyledTable, TableHeader, TableCell, Chevron, LogRow, LoadingIndicator } from \"./StyledLogViewer\";\nimport { TimelineChartSVG } from './TimelineChartSVG';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LogViewer = () => {\n  _s();\n  const [logs, setLogs] = useState([]); // Store log entries\n  const [expandedRows, setExpandedRows] = useState([]); // Manage expanded rows\n  const [start, setStart] = useState(0); // Byte start position for range requests\n  const chunkSize = 10000; // Fetch 64KB chunks at a time\n  const url = \"https://s3.amazonaws.com/io.cribl.c021.takehome/cribl.log\";\n  const endOfLogRef = useRef(null); // Ref for the loading element\n  const [loading, setLoading] = useState(false); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  const parseNDJSON = data => {\n    const lines = data.split(\"\\n\").filter(line => line.trim() !== \"\");\n    const newLogs = [];\n    lines.forEach(line => {\n      if (line.trim() !== \"\") {\n        try {\n          const logEntry = JSON.parse(line);\n          newLogs.push(logEntry);\n        } catch (error) {\n          console.error(\"Failed to parse line:\", line, error);\n        }\n      }\n    });\n    setLogs(prevLogs => [...prevLogs, ...newLogs]);\n  };\n  const fetchLogChunk = async (url, start, end) => {\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Range: `bytes=${start}-${end}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch logs: ${response.statusText}`);\n      }\n      const text = await response.text();\n      return text;\n    } catch (error) {\n      setError(\"Failed to load logs. Please try again.\");\n      throw error;\n    }\n  };\n  const fetchLogs = useCallback(async () => {\n    if (loading) return; // Prevent fetch if already loading or end of data is reached\n\n    setLoading(true); // Start loading\n    const newChunk = await fetchLogChunk(url, start, start + chunkSize);\n    parseNDJSON(newChunk);\n    setStart(prev => prev + chunkSize);\n    setLoading(false); // End loading\n    console.log('false');\n  }, [url, start, loading]);\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && !loading) {\n        fetchLogs(); // Fetch more logs when the loading element is visible and conditions are met\n      }\n    }, {\n      threshold: 0.5 // Trigger when 50% of the loading element is visible\n    });\n    if (endOfLogRef.current) {\n      observer.observe(endOfLogRef.current);\n    }\n    return () => {\n      if (endOfLogRef.current) {\n        observer.unobserve(endOfLogRef.current);\n      }\n    };\n  }, [fetchLogs, loading]);\n  const toggleRow = index => {\n    setExpandedRows(prevExpandedRows => prevExpandedRows.includes(index) ? prevExpandedRows.filter(row => row !== index) : [...prevExpandedRows, index]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TimelineChartSVG, {\n      data: logs,\n      \"data-testid\": \"timeline-chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(LogViewerContainer, {\n      children: [/*#__PURE__*/_jsxDEV(StyledTable, {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(TableHeader, {\n              scope: \"col\",\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableHeader, {\n              scope: \"col\",\n              children: \"Event\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(LogRow, {\n            onClick: () => toggleRow(index),\n            tabIndex: 0,\n            onKeyDown: e => {\n              if (e.key === \"Enter\" || e.key === \" \") {\n                toggleRow(index);\n              }\n            },\n            role: \"button\",\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: [/*#__PURE__*/_jsxDEV(Chevron, {\n                expanded: expandedRows.includes(index),\n                children: expandedRows.includes(index) ? \"⌄\" : \"›\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 19\n              }, this), new Date(log._time).toISOString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: expandedRows.includes(index) ? /*#__PURE__*/_jsxDEV(\"pre\", {\n                children: JSON.stringify(log, null, 2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: JSON.stringify(log)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        children: \"Loading more logs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this), \" \", error && /*#__PURE__*/_jsxDEV(\"div\", {\n        role: \"alert\",\n        style: {\n          color: \"red\"\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: endOfLogRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(LogViewer, \"h8nmPjOBEPtpDslqi8DSNr1WYUw=\");\n_c = LogViewer;\nexport default LogViewer;\nvar _c;\n$RefreshReg$(_c, \"LogViewer\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","LogViewerContainer","StyledTable","TableHeader","TableCell","Chevron","LogRow","LoadingIndicator","TimelineChartSVG","jsxDEV","_jsxDEV","Fragment","_Fragment","LogViewer","_s","logs","setLogs","expandedRows","setExpandedRows","start","setStart","chunkSize","url","endOfLogRef","loading","setLoading","error","setError","parseNDJSON","data","lines","split","filter","line","trim","newLogs","forEach","logEntry","JSON","parse","push","console","prevLogs","fetchLogChunk","end","response","fetch","headers","Range","ok","Error","statusText","text","fetchLogs","newChunk","prev","log","observer","IntersectionObserver","entries","isIntersecting","threshold","current","observe","unobserve","toggleRow","index","prevExpandedRows","includes","row","children","fileName","_jsxFileName","lineNumber","columnNumber","scope","map","onClick","tabIndex","onKeyDown","e","key","role","expanded","Date","_time","toISOString","stringify","style","color","ref","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/LogViewer.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  LogViewerContainer,\n  StyledTable,\n  TableHeader,\n  TableCell,\n  Chevron,\n  LogRow,\n  LoadingIndicator,\n} from \"./StyledLogViewer\";\nimport {TimelineChartSVG} from './TimelineChartSVG'\n\nconst LogViewer = () => {\n  const [logs, setLogs] = useState([]); // Store log entries\n  const [expandedRows, setExpandedRows] = useState([]); // Manage expanded rows\n  const [start, setStart] = useState(0); // Byte start position for range requests\n  const chunkSize = 10000; // Fetch 64KB chunks at a time\n  const url = \"https://s3.amazonaws.com/io.cribl.c021.takehome/cribl.log\";\n\n  const endOfLogRef = useRef(null); // Ref for the loading element\n  const [loading, setLoading] = useState(false); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  const parseNDJSON = (data) => {\n    const lines = data.split(\"\\n\").filter((line) => line.trim() !== \"\");\n    const newLogs = [];\n\n    lines.forEach((line) => {\n      if (line.trim() !== \"\") {\n        try {\n          const logEntry = JSON.parse(line);\n          newLogs.push(logEntry);\n        } catch (error) {\n          console.error(\"Failed to parse line:\", line, error);\n        }\n      }\n    });\n    setLogs((prevLogs) => [...prevLogs, ...newLogs]);\n  };\n\n  const fetchLogChunk = async (url, start, end) => {\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Range: `bytes=${start}-${end}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch logs: ${response.statusText}`);\n      }\n\n      const text = await response.text();\n      return text;\n    } catch (error) {\n      setError(\"Failed to load logs. Please try again.\");\n      throw error;\n    }\n  };\n\n  const fetchLogs = useCallback(async () => {\n    if (loading) return; // Prevent fetch if already loading or end of data is reached\n\n    setLoading(true); // Start loading\n    const newChunk = await fetchLogChunk(url, start, start + chunkSize);\n    parseNDJSON(newChunk);\n    setStart((prev) => prev + chunkSize);\n    setLoading(false); // End loading\n    console.log('false')\n  }, [url, start, loading]);\n\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !loading) {\n          fetchLogs(); // Fetch more logs when the loading element is visible and conditions are met\n        }\n      },\n      {\n        threshold: 0.5, // Trigger when 50% of the loading element is visible\n      }\n    );\n\n    if (endOfLogRef.current) {\n      observer.observe(endOfLogRef.current);\n    }\n\n    return () => {\n      if (endOfLogRef.current) {\n        observer.unobserve(endOfLogRef.current);\n      }\n    };\n  }, [fetchLogs, loading]);\n\n  const toggleRow = (index) => {\n    setExpandedRows((prevExpandedRows) =>\n      prevExpandedRows.includes(index)\n        ? prevExpandedRows.filter((row) => row !== index)\n        : [...prevExpandedRows, index]\n    );\n  };\n\n  return (\n    <>\n      {<TimelineChartSVG data={logs} data-testid=\"timeline-chart\"/>}\n      <LogViewerContainer>\n        <StyledTable>\n          <thead>\n            <tr>\n              <TableHeader scope=\"col\">Time</TableHeader>\n              <TableHeader scope=\"col\">Event</TableHeader>\n            </tr>\n          </thead>\n          <tbody>\n            {logs.map((log, index) => (\n              <LogRow\n                key={index}\n                onClick={() => toggleRow(index)}\n                tabIndex={0}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\" || e.key === \" \") {\n                    toggleRow(index);\n                  }\n                }}\n                role=\"button\"\n              >\n                <TableCell>\n                  <Chevron expanded={expandedRows.includes(index)}>\n                    {expandedRows.includes(index) ? \"⌄\" : \"›\"}\n                  </Chevron>\n                  {new Date(log._time).toISOString()}\n                </TableCell>\n                <TableCell>\n                  {expandedRows.includes(index) ? (\n                    <pre>{JSON.stringify(log, null, 2)}</pre>\n                  ) : (\n                    <span>{JSON.stringify(log)}</span>\n                  )}\n                </TableCell>\n              </LogRow>\n            ))}\n          </tbody>\n        </StyledTable>\n        {loading && <LoadingIndicator>Loading more logs...</LoadingIndicator>}{\" \"}\n        {error && (\n          <div role=\"alert\" style={{ color: \"red\" }}>\n            {error}\n          </div>\n        )}{\" \"}\n        <div ref={endOfLogRef} /> {/* Ref for Intersection Observer */}\n      </LogViewerContainer>\n    </>\n  );\n};\n\nexport default LogViewer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}