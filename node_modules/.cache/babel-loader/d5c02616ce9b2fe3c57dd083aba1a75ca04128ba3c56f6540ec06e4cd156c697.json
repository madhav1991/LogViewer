{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js\";\n// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart; \n\nimport React from \"react\";\n\n// Group logs by date and hour\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupLogsByDateAndHour = data => {\n  const grouped = {};\n  data.forEach(log => {\n    const date = new Date(log._time).toLocaleDateString(); // Get the date\n    const hour = new Date(log._time).getHours(); // Get the hour\n    const key = `${date} ${hour}`; // Create a key combining date and hour\n    grouped[key] = (grouped[key] || 0) + 1; // Increment the count\n  });\n  return Object.keys(grouped).map(key => {\n    const [date, hour] = key.split(\" \");\n    return {\n      date,\n      hour,\n      count: grouped[key]\n    };\n  });\n};\nexport const TimelineChartSVG = _ref => {\n  let {\n    data\n  } = _ref;\n  const groupedData = groupLogsByDateAndHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count));\n  const baseWidth = 600;\n  const minBarWidth = 65;\n  const chartHeight = 200;\n  const chartWidth = Math.max(baseWidth, Math.min(groupedData.length * minBarWidth, baseWidth * 2));\n  const barWidth = Math.max(minBarWidth, chartWidth / groupedData.length);\n  const yAxisTicks = 5; // Number of ticks on the Y-axis\n  const tickSpacing = chartHeight / yAxisTicks; // Spacing between Y-axis ticks\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: chartWidth + 50,\n    height: chartHeight + 50,\n    role: \"img\",\n    \"aria-labelledby\": \"chartTitle chartDesc\",\n    tabIndex: \"0\",\n    children: [/*#__PURE__*/_jsxDEV(\"title\", {\n      id: \"chartTitle\",\n      children: \"Logs Timeline Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"desc\", {\n      id: \"chartDesc\",\n      children: \"A bar chart representing logs grouped by date and hour. Each bar shows the count of logs for a specific hour.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), groupedData.map((d, i) => {\n      const barHeight = d.count / maxCount * chartHeight;\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: i * barWidth + 50 // Adjust x to account for Y-axis\n        ,\n        y: chartHeight - barHeight,\n        width: barWidth - 2 // Add spacing between bars\n        ,\n        height: barHeight,\n        fill: \"#4A90E2\",\n        \"aria-label\": `${d.date} ${d.hour}:00 - ${d.count} logs`\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this);\n    }), groupedData.map((d, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: i * barWidth + barWidth / 2 + 50 // Adjust x to account for Y-axis\n      ,\n      y: chartHeight + 20 // Position of x-axis labels\n      ,\n      textAnchor: \"middle\",\n      fontSize: \"10px\",\n      fill: \"#333\",\n      children: [`${d.date} ${d.hour}:00`, \" \"]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)), [...Array(yAxisTicks + 1)].map((_, i) => {\n      const value = Math.round(maxCount / yAxisTicks * i); // Calculate tick value\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"45\",\n          y1: chartHeight - i * tickSpacing,\n          x2: \"50\",\n          y2: chartHeight - i * tickSpacing,\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: \"40\",\n          y: chartHeight - i * tickSpacing + 4,\n          textAnchor: \"end\",\n          fontSize: \"12px\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"20\",\n      y: chartHeight / 2,\n      textAnchor: \"middle\",\n      fontSize: \"12px\",\n      transform: `rotate(-90, 20, ${chartHeight / 2})` // Rotate for vertical label\n      ,\n      children: \"Logs Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChartSVG;\nexport default TimelineChartSVG;\nvar _c;\n$RefreshReg$(_c, \"TimelineChartSVG\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","groupLogsByDateAndHour","data","grouped","forEach","log","date","Date","_time","toLocaleDateString","hour","getHours","key","Object","keys","map","split","count","TimelineChartSVG","_ref","groupedData","maxCount","Math","max","d","baseWidth","minBarWidth","chartHeight","chartWidth","min","length","barWidth","yAxisTicks","tickSpacing","width","height","role","tabIndex","children","id","fileName","_jsxFileName","lineNumber","columnNumber","i","barHeight","x","y","fill","textAnchor","fontSize","Array","_","value","round","x1","y1","x2","y2","stroke","transform","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart; \n\nimport React from \"react\";\n\n// Group logs by date and hour\nconst groupLogsByDateAndHour = (data) => {\n  const grouped = {};\n  data.forEach(log => {\n    const date = new Date(log._time).toLocaleDateString(); // Get the date\n    const hour = new Date(log._time).getHours(); // Get the hour\n    const key = `${date} ${hour}`; // Create a key combining date and hour\n    grouped[key] = (grouped[key] || 0) + 1; // Increment the count\n  });\n  return Object.keys(grouped).map(key => {\n    const [date, hour] = key.split(\" \");\n    return {\n      date,\n      hour,\n      count: grouped[key]\n    };\n  });\n};\n\nexport const TimelineChartSVG = ({ data }) => {\n  const groupedData = groupLogsByDateAndHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count));\n\n  const baseWidth = 600; \n  const minBarWidth = 65; \n  const chartHeight = 200;\n\n  \n  const chartWidth = Math.max(baseWidth, Math.min(groupedData.length * minBarWidth, baseWidth * 2));\n\n  const barWidth = Math.max(minBarWidth, chartWidth / groupedData.length); \n  const yAxisTicks = 5; // Number of ticks on the Y-axis\n  const tickSpacing = chartHeight / yAxisTicks; // Spacing between Y-axis ticks\n\n  return (\n    <svg \n      width={chartWidth + 50} \n      height={chartHeight + 50} \n      role=\"img\" \n      aria-labelledby=\"chartTitle chartDesc\" \n      tabIndex=\"0\"\n    >\n      <title id=\"chartTitle\">Logs Timeline Chart</title>\n      <desc id=\"chartDesc\">A bar chart representing logs grouped by date and hour. Each bar shows the count of logs for a specific hour.</desc>\n\n      {/* Bars */}\n      {groupedData.map((d, i) => {\n        const barHeight = (d.count / maxCount) * chartHeight;\n        return (\n          <rect\n            key={i}\n            x={i * barWidth + 50} // Adjust x to account for Y-axis\n            y={chartHeight - barHeight}\n            width={barWidth - 2} // Add spacing between bars\n            height={barHeight}\n            fill=\"#4A90E2\"\n            aria-label={`${d.date} ${d.hour}:00 - ${d.count} logs`}\n          />\n        );\n      })}\n\n      {/* X-axis labels */}\n      {groupedData.map((d, i) => (\n        <text\n          key={i}\n          x={i * barWidth + barWidth / 2 + 50} // Adjust x to account for Y-axis\n          y={chartHeight + 20} // Position of x-axis labels\n          textAnchor=\"middle\"\n          fontSize=\"10px\"\n          fill=\"#333\"\n        >\n          {`${d.date} ${d.hour}:00`} {/* Display date and hour */}\n        </text>\n      ))}\n\n      {/* Y-axis ticks and labels */}\n      {[...Array(yAxisTicks + 1)].map((_, i) => {\n        const value = Math.round((maxCount / yAxisTicks) * i); // Calculate tick value\n        return (\n          <g key={i}>\n            {/* Y-axis ticks */}\n            <line\n              x1=\"45\"\n              y1={chartHeight - i * tickSpacing}\n              x2=\"50\"\n              y2={chartHeight - i * tickSpacing}\n              stroke=\"black\"\n            />\n            {/* Y-axis labels */}\n            <text\n              x=\"40\"\n              y={chartHeight - i * tickSpacing + 4}\n              textAnchor=\"end\"\n              fontSize=\"12px\"\n            >\n              {value}\n            </text>\n          </g>\n        );\n      })}\n\n      <text\n        x=\"20\"\n        y={chartHeight / 2}\n        textAnchor=\"middle\"\n        fontSize=\"12px\"\n        transform={`rotate(-90, 20, ${chartHeight / 2})`} // Rotate for vertical label\n      >\n        Logs Count\n      </text>\n    </svg>\n  );\n};\n\nexport default TimelineChartSVG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}