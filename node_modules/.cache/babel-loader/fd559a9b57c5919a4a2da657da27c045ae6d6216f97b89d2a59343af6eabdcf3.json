{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js\";\n// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;import React from \"react\";\n\nimport React from \"react\";\n\n// Get the X position based on the hour\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getXPosition = hour => {\n  if (hour >= 0 && hour < 6) {\n    return hour / 6 * 150; // Scale to the 12 AM to 6 AM range\n  } else if (hour >= 6 && hour < 12) {\n    return 150 + (hour - 6) / 6 * 150; // Scale to the 6 AM to 12 PM range\n  } else if (hour >= 12 && hour < 18) {\n    return 300 + (hour - 12) / 6 * 150; // Scale to the 12 PM to 6 PM range\n  } else {\n    return 450 + (hour - 18) / 6 * 150; // Scale to the 6 PM to 12 AM range\n  }\n};\n\n// Group logs by four main time points and interpolate for exact hours\nconst groupLogsByTime = data => {\n  const grouped = {\n    \"12 AM\": 0,\n    \"6 AM\": 0,\n    \"12 PM\": 0,\n    \"6 PM\": 0,\n    \"other\": []\n  };\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours();\n    if (hour === 0) {\n      grouped[\"12 AM\"] += 1; // Increment for 12 AM\n    } else if (hour === 6) {\n      grouped[\"6 AM\"] += 1; // Increment for 6 AM\n    } else if (hour === 12) {\n      grouped[\"12 PM\"] += 1; // Increment for 12 PM\n    } else if (hour === 18) {\n      grouped[\"6 PM\"] += 1; // Increment for 6 PM\n    } else {\n      grouped[\"other\"].push(hour); // Store hours that are not on the main time points\n    }\n  });\n\n  // Convert the grouped object to an array for rendering\n  return {\n    mainPoints: Object.keys(grouped).map(key => ({\n      time: key,\n      count: grouped[key]\n    })),\n    otherLogs: grouped[\"other\"] // Return other logs for separate processing\n  };\n};\nexport const TimelineChartSVG = _ref => {\n  let {\n    data\n  } = _ref;\n  const {\n    mainPoints,\n    otherLogs\n  } = groupLogsByTime(data);\n  const maxCount = Math.max(...mainPoints.map(d => d.count)) || 1; // Avoid division by zero\n  const chartWidth = 600;\n  const chartHeight = 200;\n  const barWidth = chartWidth / mainPoints.length;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: chartWidth + 50,\n    height: chartHeight + 50,\n    children: [mainPoints.map((d, i) => {\n      const barHeight = d.count / maxCount * chartHeight;\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: i * barWidth + 50 // Adjust x to account for Y-axis\n        ,\n        y: chartHeight - barHeight,\n        width: barWidth - 2,\n        height: barHeight,\n        fill: \"#4A90E2\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this);\n    }), otherLogs.map((hour, index) => {\n      const xPos = getXPosition(hour);\n      const barHeight = 1 / maxCount * chartHeight; // Height for logs that are not main points\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: xPos + 50 // Adjust x to account for Y-axis\n        ,\n        y: chartHeight - barHeight,\n        width: 5 // Small width for these bars\n        ,\n        height: barHeight,\n        fill: \"#E94E77\"\n      }, `other-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this);\n    }), mainPoints.map((d, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: i * barWidth + barWidth / 2 + 50 // Adjust x to account for Y-axis\n      ,\n      y: chartHeight + 20 // Position of x-axis labels\n      ,\n      textAnchor: \"middle\",\n      fontSize: \"10px\",\n      children: [d.time, \" \"]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [...Array(5)].map((_, i) => {\n        const value = Math.round(maxCount / 4 * i); // Calculate tick value for 5 ticks (0 to maxCount)\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"45\",\n            y1: chartHeight - i * (chartHeight / 4),\n            x2: \"50\",\n            y2: chartHeight - i * (chartHeight / 4),\n            stroke: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: \"40\",\n            y: chartHeight - i * (chartHeight / 4) + 4,\n            textAnchor: \"end\",\n            fontSize: \"12px\",\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"20\",\n      y: chartHeight / 2,\n      textAnchor: \"middle\",\n      fontSize: \"12px\",\n      transform: `rotate(-90, 20, ${chartHeight / 2})` // Rotate for vertical label\n      ,\n      children: \"Logs Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChartSVG;\nexport default TimelineChartSVG;\nvar _c;\n$RefreshReg$(_c, \"TimelineChartSVG\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","getXPosition","hour","groupLogsByTime","data","grouped","forEach","log","Date","_time","getHours","push","mainPoints","Object","keys","map","key","time","count","otherLogs","TimelineChartSVG","_ref","maxCount","Math","max","d","chartWidth","chartHeight","barWidth","length","width","height","children","i","barHeight","x","y","fill","fileName","_jsxFileName","lineNumber","columnNumber","index","xPos","textAnchor","fontSize","Array","_","value","round","x1","y1","x2","y2","stroke","transform","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;import React from \"react\";\n\nimport React from \"react\";\n\n// Get the X position based on the hour\nconst getXPosition = (hour) => {\n  if (hour >= 0 && hour < 6) {\n    return (hour / 6) * 150; // Scale to the 12 AM to 6 AM range\n  } else if (hour >= 6 && hour < 12) {\n    return 150 + ((hour - 6) / 6) * 150; // Scale to the 6 AM to 12 PM range\n  } else if (hour >= 12 && hour < 18) {\n    return 300 + ((hour - 12) / 6) * 150; // Scale to the 12 PM to 6 PM range\n  } else {\n    return 450 + ((hour - 18) / 6) * 150; // Scale to the 6 PM to 12 AM range\n  }\n};\n\n// Group logs by four main time points and interpolate for exact hours\nconst groupLogsByTime = (data) => {\n  const grouped = {\n    \"12 AM\": 0,\n    \"6 AM\": 0,\n    \"12 PM\": 0,\n    \"6 PM\": 0,\n    \"other\": []\n  };\n\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours();\n    if (hour === 0) {\n      grouped[\"12 AM\"] += 1; // Increment for 12 AM\n    } else if (hour === 6) {\n      grouped[\"6 AM\"] += 1; // Increment for 6 AM\n    } else if (hour === 12) {\n      grouped[\"12 PM\"] += 1; // Increment for 12 PM\n    } else if (hour === 18) {\n      grouped[\"6 PM\"] += 1; // Increment for 6 PM\n    } else {\n      grouped[\"other\"].push(hour); // Store hours that are not on the main time points\n    }\n  });\n\n  // Convert the grouped object to an array for rendering\n  return {\n    mainPoints: Object.keys(grouped).map(key => ({\n      time: key,\n      count: grouped[key]\n    })),\n    otherLogs: grouped[\"other\"] // Return other logs for separate processing\n  };\n};\n\nexport const TimelineChartSVG = ({ data }) => {\n  const { mainPoints, otherLogs } = groupLogsByTime(data);\n  const maxCount = Math.max(...mainPoints.map(d => d.count)) || 1; // Avoid division by zero\n  const chartWidth = 600;\n  const chartHeight = 200;\n  const barWidth = chartWidth / mainPoints.length;\n\n  return (\n    <svg width={chartWidth + 50} height={chartHeight + 50}>\n      {/* Bars for main time points */}\n      {mainPoints.map((d, i) => {\n        const barHeight = (d.count / maxCount) * chartHeight;\n        return (\n          <rect\n            key={i}\n            x={i * barWidth + 50} // Adjust x to account for Y-axis\n            y={chartHeight - barHeight}\n            width={barWidth - 2}\n            height={barHeight}\n            fill=\"#4A90E2\"\n          />\n        );\n      })}\n\n      {/* Bars for other logs */}\n      {otherLogs.map((hour, index) => {\n        const xPos = getXPosition(hour);\n        const barHeight = (1 / maxCount) * chartHeight; // Height for logs that are not main points\n        return (\n          <rect\n            key={`other-${index}`}\n            x={xPos + 50} // Adjust x to account for Y-axis\n            y={chartHeight - barHeight}\n            width={5} // Small width for these bars\n            height={barHeight}\n            fill=\"#E94E77\"\n          />\n        );\n      })}\n\n      {/* X-axis labels for specific time points */}\n      {mainPoints.map((d, i) => (\n        <text\n          key={i}\n          x={i * barWidth + barWidth / 2 + 50} // Adjust x to account for Y-axis\n          y={chartHeight + 20} // Position of x-axis labels\n          textAnchor=\"middle\"\n          fontSize=\"10px\"\n        >\n          {d.time} {/* Display time point */}\n        </text>\n      ))}\n\n      {/* Y-axis ticks and labels */}\n      <g>\n        {[...Array(5)].map((_, i) => {\n          const value = Math.round((maxCount / 4) * i); // Calculate tick value for 5 ticks (0 to maxCount)\n          return (\n            <g key={i}>\n              {/* Y-axis ticks */}\n              <line\n                x1=\"45\"\n                y1={chartHeight - i * (chartHeight / 4)}\n                x2=\"50\"\n                y2={chartHeight - i * (chartHeight / 4)}\n                stroke=\"black\"\n              />\n              {/* Y-axis labels */}\n              <text\n                x=\"40\"\n                y={chartHeight - i * (chartHeight / 4) + 4}\n                textAnchor=\"end\"\n                fontSize=\"12px\"\n              >\n                {value}\n              </text>\n            </g>\n          );\n        })}\n      </g>\n\n      {/* Y-axis label */}\n      <text\n        x=\"20\"\n        y={chartHeight / 2}\n        textAnchor=\"middle\"\n        fontSize=\"12px\"\n        transform={`rotate(-90, 20, ${chartHeight / 2})`} // Rotate for vertical label\n      >\n        Logs Count\n      </text>\n    </svg>\n  );\n};\n\nexport default TimelineChartSVG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}