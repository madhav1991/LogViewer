{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js\";\n// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;\nimport React from \"react\";\n\n// Group logs by hour\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupLogsByHour = data => {\n  const grouped = {};\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours();\n    grouped[hour] = (grouped[hour] || 0) + 1;\n  });\n  return Object.keys(grouped).map(hour => ({\n    time: hour,\n    count: grouped[hour]\n  }));\n};\nexport const TimelineChartSVG = _ref => {\n  let {\n    data\n  } = _ref;\n  console.log('data', data);\n  const groupedData = groupLogsByHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count), 1); // Ensure non-zero\n  const chartWidth = 600;\n  const chartHeight = 200;\n  const padding = 40; // Extra padding for x-axis labels\n  const barGap = 5; // Gap between bars\n\n  // Calculate bar width based on the number of data points\n  const barWidth = (chartWidth - barGap * groupedData.length) / Math.max(groupedData.length, 1);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: chartWidth,\n    height: chartHeight + padding,\n    children: [groupedData.map((d, i) => {\n      const barHeight = d.count / maxCount * chartHeight;\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: i * (barWidth + barGap),\n        y: chartHeight - barHeight,\n        width: barWidth,\n        height: barHeight,\n        fill: \"#4A90E2\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this);\n    }), groupedData.map((d, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: i * (barWidth + barGap) + barWidth / 2,\n      y: chartHeight + 20 // Move the label below the chart\n      ,\n      textAnchor: \"middle\",\n      fontSize: \"12px\",\n      children: `${d.time}:00`\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)), [0, 25, 50, 75, 100].map((tick, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: -10,\n      y: chartHeight - chartHeight * tick / 100 + 5,\n      textAnchor: \"end\",\n      fontSize: \"10px\",\n      fill: \"#555\",\n      children: Math.round(maxCount * tick / 100)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChartSVG;\nexport default TimelineChartSVG;\nvar _c;\n$RefreshReg$(_c, \"TimelineChartSVG\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","groupLogsByHour","data","grouped","forEach","log","hour","Date","_time","getHours","Object","keys","map","time","count","TimelineChartSVG","_ref","console","groupedData","maxCount","Math","max","d","chartWidth","chartHeight","padding","barGap","barWidth","length","width","height","children","i","barHeight","x","y","fill","fileName","_jsxFileName","lineNumber","columnNumber","textAnchor","fontSize","tick","round","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;\nimport React from \"react\";\n\n// Group logs by hour\nconst groupLogsByHour = (data) => {\n  const grouped = {};\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours();\n    grouped[hour] = (grouped[hour] || 0) + 1;\n  });\n  return Object.keys(grouped).map(hour => ({\n    time: hour,\n    count: grouped[hour]\n  }));\n};\n\nexport const TimelineChartSVG = ({ data }) => {\n  console.log('data', data);\n  const groupedData = groupLogsByHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count), 1); // Ensure non-zero\n  const chartWidth = 600;\n  const chartHeight = 200;\n  const padding = 40; // Extra padding for x-axis labels\n  const barGap = 5; // Gap between bars\n\n  // Calculate bar width based on the number of data points\n  const barWidth = (chartWidth - barGap * groupedData.length) / Math.max(groupedData.length, 1);\n\n  return (\n    <svg width={chartWidth} height={chartHeight + padding}>\n      {groupedData.map((d, i) => {\n        const barHeight = (d.count / maxCount) * chartHeight;\n        return (\n          <rect\n            key={i}\n            x={i * (barWidth + barGap)}\n            y={chartHeight - barHeight}\n            width={barWidth}\n            height={barHeight}\n            fill=\"#4A90E2\"\n          />\n        );\n      })}\n\n      {/* X-axis labels */}\n      {groupedData.map((d, i) => (\n        <text\n          key={i}\n          x={i * (barWidth + barGap) + barWidth / 2}\n          y={chartHeight + 20} // Move the label below the chart\n          textAnchor=\"middle\"\n          fontSize=\"12px\"\n        >\n          {`${d.time}:00`}\n        </text>\n      ))}\n\n      {/* Y-axis ticks (Optional for reference) */}\n      {[0, 25, 50, 75, 100].map((tick, i) => (\n        <text\n          key={i}\n          x={-10}\n          y={chartHeight - (chartHeight * tick) / 100 + 5}\n          textAnchor=\"end\"\n          fontSize=\"10px\"\n          fill=\"#555\"\n        >\n          {Math.round((maxCount * tick) / 100)}\n        </text>\n      ))}\n    </svg>\n  );\n};\n\nexport default TimelineChartSVG;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAIC,IAAI,IAAK;EAChC,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClBD,IAAI,CAACE,OAAO,CAACC,GAAG,IAAI;IAClB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,GAAG,CAACG,KAAK,CAAC,CAACC,QAAQ,CAAC,CAAC;IAC3CN,OAAO,CAACG,IAAI,CAAC,GAAG,CAACH,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;EAC1C,CAAC,CAAC;EACF,OAAOI,MAAM,CAACC,IAAI,CAACR,OAAO,CAAC,CAACS,GAAG,CAACN,IAAI,KAAK;IACvCO,IAAI,EAAEP,IAAI;IACVQ,KAAK,EAAEX,OAAO,CAACG,IAAI;EACrB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,OAAO,MAAMS,gBAAgB,GAAGC,IAAA,IAAc;EAAA,IAAb;IAAEd;EAAK,CAAC,GAAAc,IAAA;EACvCC,OAAO,CAACZ,GAAG,CAAC,MAAM,EAAEH,IAAI,CAAC;EACzB,MAAMgB,WAAW,GAAGjB,eAAe,CAACC,IAAI,CAAC;EACzC,MAAMiB,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGH,WAAW,CAACN,GAAG,CAACU,CAAC,IAAIA,CAAC,CAACR,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAChE,MAAMS,UAAU,GAAG,GAAG;EACtB,MAAMC,WAAW,GAAG,GAAG;EACvB,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;EACpB,MAAMC,MAAM,GAAG,CAAC,CAAC,CAAC;;EAElB;EACA,MAAMC,QAAQ,GAAG,CAACJ,UAAU,GAAGG,MAAM,GAAGR,WAAW,CAACU,MAAM,IAAIR,IAAI,CAACC,GAAG,CAACH,WAAW,CAACU,MAAM,EAAE,CAAC,CAAC;EAE7F,oBACE5B,OAAA;IAAK6B,KAAK,EAAEN,UAAW;IAACO,MAAM,EAAEN,WAAW,GAAGC,OAAQ;IAAAM,QAAA,GACnDb,WAAW,CAACN,GAAG,CAAC,CAACU,CAAC,EAAEU,CAAC,KAAK;MACzB,MAAMC,SAAS,GAAIX,CAAC,CAACR,KAAK,GAAGK,QAAQ,GAAIK,WAAW;MACpD,oBACExB,OAAA;QAEEkC,CAAC,EAAEF,CAAC,IAAIL,QAAQ,GAAGD,MAAM,CAAE;QAC3BS,CAAC,EAAEX,WAAW,GAAGS,SAAU;QAC3BJ,KAAK,EAAEF,QAAS;QAChBG,MAAM,EAAEG,SAAU;QAClBG,IAAI,EAAC;MAAS,GALTJ,CAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMP,CAAC;IAEN,CAAC,CAAC,EAGDtB,WAAW,CAACN,GAAG,CAAC,CAACU,CAAC,EAAEU,CAAC,kBACpBhC,OAAA;MAEEkC,CAAC,EAAEF,CAAC,IAAIL,QAAQ,GAAGD,MAAM,CAAC,GAAGC,QAAQ,GAAG,CAAE;MAC1CQ,CAAC,EAAEX,WAAW,GAAG,EAAG,CAAC;MAAA;MACrBiB,UAAU,EAAC,QAAQ;MACnBC,QAAQ,EAAC,MAAM;MAAAX,QAAA,EAEd,GAAGT,CAAC,CAACT,IAAI;IAAK,GANVmB,CAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOF,CACP,CAAC,EAGD,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC5B,GAAG,CAAC,CAAC+B,IAAI,EAAEX,CAAC,kBAChChC,OAAA;MAEEkC,CAAC,EAAE,CAAC,EAAG;MACPC,CAAC,EAAEX,WAAW,GAAIA,WAAW,GAAGmB,IAAI,GAAI,GAAG,GAAG,CAAE;MAChDF,UAAU,EAAC,KAAK;MAChBC,QAAQ,EAAC,MAAM;MACfN,IAAI,EAAC,MAAM;MAAAL,QAAA,EAEVX,IAAI,CAACwB,KAAK,CAAEzB,QAAQ,GAAGwB,IAAI,GAAI,GAAG;IAAC,GAP/BX,CAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQF,CACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACK,EAAA,GAxDW9B,gBAAgB;AA0D7B,eAAeA,gBAAgB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}