{"ast":null,"code":"var _jsxFileName = \"/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;import React from \"react\";\n\n// Group logs by hour\nconst groupLogsByHour = data => {\n  const grouped = {};\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours(); // Corrected property to `_time`\n    grouped[hour] = (grouped[hour] || 0) + 1;\n  });\n  return Object.keys(grouped).map(hour => ({\n    time: hour,\n    count: grouped[hour]\n  }));\n};\nexport const TimelineChartSVG = _ref => {\n  let {\n    data\n  } = _ref;\n  const groupedData = groupLogsByHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count));\n  const chartWidth = 600;\n  const chartHeight = 200;\n  const barWidth = chartWidth / groupedData.length;\n\n  // Define Y-axis intervals (e.g., 5 intervals)\n  const yAxisTicks = 5;\n  const yAxisStep = maxCount / yAxisTicks;\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: chartWidth,\n    height: chartHeight + 60,\n    children: [groupedData.map((d, i) => {\n      const barHeight = d.count / maxCount * chartHeight;\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: i * barWidth,\n        y: chartHeight - barHeight,\n        width: barWidth - 2 // Add spacing between bars\n        ,\n        height: barHeight,\n        fill: \"#4A90E2\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this);\n    }), groupedData.map((d, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: i * barWidth + barWidth / 2,\n      y: chartHeight + 20 // Adjust position of x-axis labels\n      ,\n      textAnchor: \"middle\",\n      fontSize: \"12px\",\n      children: [`${d.time}:00`, \" \"]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"text\", {\n      x: \"-10\",\n      y: chartHeight / 2,\n      transform: `rotate(-90, 10, ${chartHeight / 2})` // Rotate to fit along Y-axis\n      ,\n      textAnchor: \"middle\",\n      fontSize: \"14px\",\n      fill: \"#000\",\n      children: \"Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), Array.from({\n      length: yAxisTicks + 1\n    }).map((_, i) => {\n      const y = chartHeight - i * chartHeight / yAxisTicks;\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"0\",\n          y1: y,\n          x2: \"5\",\n          y2: y,\n          stroke: \"#000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: \"-10\",\n          y: y + 4,\n          textAnchor: \"end\",\n          fontSize: \"12px\",\n          children: Math.round(i * yAxisStep)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChartSVG;\nexport default TimelineChartSVG;\nvar _c;\n$RefreshReg$(_c, \"TimelineChartSVG\");","map":{"version":3,"names":["groupLogsByHour","data","grouped","forEach","log","hour","Date","_time","getHours","Object","keys","map","time","count","TimelineChartSVG","_ref","groupedData","maxCount","Math","max","d","chartWidth","chartHeight","barWidth","length","yAxisTicks","yAxisStep","_jsxDEV","width","height","children","i","barHeight","x","y","fill","fileName","_jsxFileName","lineNumber","columnNumber","textAnchor","fontSize","transform","Array","from","_","x1","y1","x2","y2","stroke","round","_c","$RefreshReg$"],"sources":["/Users/mperi/Documents/Projects/LogViewer/src/TimeLineChart.js"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\n// import * as echarts from \"echarts\";\n// import { groupLogsByHour } from \"./utils/index\";\n\n// export const TimelineChart = ({ data }) => {\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const chartInstance = echarts.init(chartRef.current);\n\n//     const options = {\n//       title: {\n//         text: \"Timeline Component\",\n//       },\n//       tooltip: {\n//         trigger: \"axis\",\n//       },\n//       xAxis: {\n//         type: \"time\",\n//         boundaryGap: false,\n//         axisLabel: {\n//           formatter: (value) => new Date(value).toLocaleTimeString(),\n//         },\n//       },\n//       yAxis: {\n//         type: \"value\",\n//         name: \"Event Count\",\n//       },\n//       series: [\n//         {\n//           type: \"bar\",\n//           data: groupLogsByHour(data).map((d) => [\n//             new Date(d.time).getTime(),\n//             d.count,\n//           ]),\n//           barWidth: \"60%\",\n//           emphasis: {\n//             focus: \"series\", // Improves accessibility when elements are focused\n//           },\n//         },\n//       ],\n//     };\n\n//     chartInstance.setOption(options);\n\n//     return () => {\n//       chartInstance.dispose();\n//     };\n//   }, [data]);\n\n//   return (\n//     <div\n//       role=\"img\"\n//       aria-labelledby=\"Timeline Chart\"\n//       aria-describedby=\"This chart shows you events logged over time\"\n//       ref={chartRef}\n//       style={{ width: \"100%\", height: \"200px\" }}\n//       tabIndex={0}\n//     >\n//       <h2 id=\"chartTitle\" style={{ display: \"none\" }}>\n//         Timeline Component\n//       </h2>\n//       <p id=\"chartDescription\" style={{ display: \"none\" }}>\n//         This chart displays log events grouped by hour.\n//       </p>\n//       <p id=\"chartTooltip\" style={{ display: \"none\" }}>\n//         Hover over the bars to see event counts at specific times.\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default TimelineChart;import React from \"react\";\n\n// Group logs by hour\nconst groupLogsByHour = (data) => {\n  const grouped = {};\n  data.forEach(log => {\n    const hour = new Date(log._time).getHours(); // Corrected property to `_time`\n    grouped[hour] = (grouped[hour] || 0) + 1;\n  });\n  return Object.keys(grouped).map(hour => ({\n    time: hour,\n    count: grouped[hour]\n  }));\n};\n\nexport const TimelineChartSVG = ({ data }) => {\n  const groupedData = groupLogsByHour(data);\n  const maxCount = Math.max(...groupedData.map(d => d.count));\n  \n  const chartWidth = 600;\n  const chartHeight = 200;\n  const barWidth = chartWidth / groupedData.length;\n  \n  // Define Y-axis intervals (e.g., 5 intervals)\n  const yAxisTicks = 5;\n  const yAxisStep = maxCount / yAxisTicks;\n\n  return (\n    <svg width={chartWidth} height={chartHeight + 60}>\n      {/* Bars */}\n      {groupedData.map((d, i) => {\n        const barHeight = (d.count / maxCount) * chartHeight;\n        return (\n          <rect\n            key={i}\n            x={i * barWidth}\n            y={chartHeight - barHeight}\n            width={barWidth - 2} // Add spacing between bars\n            height={barHeight}\n            fill=\"#4A90E2\"\n          />\n        );\n      })}\n\n      {/* X-axis labels */}\n      {groupedData.map((d, i) => (\n        <text\n          key={i}\n          x={i * barWidth + barWidth / 2}\n          y={chartHeight + 20} // Adjust position of x-axis labels\n          textAnchor=\"middle\"\n          fontSize=\"12px\"\n        >\n          {`${d.time}:00`} {/* Display hour label */}\n        </text>\n      ))}\n\n      {/* Y-axis label */}\n      <text\n        x=\"-10\" \n        y={chartHeight / 2}\n        transform={`rotate(-90, 10, ${chartHeight / 2})`} // Rotate to fit along Y-axis\n        textAnchor=\"middle\"\n        fontSize=\"14px\"\n        fill=\"#000\"\n      >\n        Count\n      </text>\n\n      {/* Y-axis ticks and labels */}\n      {Array.from({ length: yAxisTicks + 1 }).map((_, i) => {\n        const y = chartHeight - (i * chartHeight / yAxisTicks);\n        return (\n          <g key={i}>\n            <line\n              x1=\"0\"\n              y1={y}\n              x2=\"5\"\n              y2={y}\n              stroke=\"#000\"\n            />\n            <text\n              x=\"-10\"\n              y={y + 4}\n              textAnchor=\"end\"\n              fontSize=\"12px\"\n            >\n              {Math.round(i * yAxisStep)}\n            </text>\n          </g>\n        );\n      })}\n    </svg>\n  );\n};\n\nexport default TimelineChartSVG;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}